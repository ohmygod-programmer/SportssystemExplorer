package forms;
import api.ApiController;
import com.google.gson.JsonArray;
import com.jgoodies.forms.layout.CellConstraints;
import com.jgoodies.forms.layout.FormLayout;
import model.DataTableModel;

import javax.swing.*;
import javax.swing.plaf.FontUIResource;
import javax.swing.table.TableColumn;
import javax.swing.text.StyleContext;
import java.awt.*;
import java.awt.event.*;
import java.util.Locale;

public class Search extends JFrame {

    private JTextField mainSearchField;
    private JButton searchButton;
    private JLabel loadingLabel;
    private JPanel rootPanel;
    private JPanel dataPanel;
    private JLabel titleLabel;
    private JButton backButton;

    private JTable dataTable;
    private MouseListener dataTableMouseListener;
    private DataTableModel dataTableModel;

    public DataTableModel getDataTableModel() {
        return dataTableModel;
    }

    public void setDataTableModel(DataTableModel dataTableModel) {
        this.dataTableModel = dataTableModel;
    }

    public MouseListener getDataTableMouseListener() {
        return dataTableMouseListener;
    }

    public void setTitleText(String title) {
        titleLabel.setText(title);
    }


    public void setDataTableMouseListener(MouseListener dataTableMouseListener) {
        this.dataTableMouseListener = dataTableMouseListener;
        dataTable.addMouseListener(dataTableMouseListener);
    }

    public JButton getSearchButton() {
        return searchButton;
    }

    public void setSearchButton(JButton sportsmansButton) {
        this.searchButton = sportsmansButton;
    }

    public String getSearchText() {
        return mainSearchField.getText();
    }

    public JButton getBackButton() {
        return backButton;
    }

    public JPanel getRootPanel() {
        return rootPanel;
    }

    public JTable getDataTable() {
        return dataTable;
    }

    public Search() {


    }

    public void showLoading() {
        dataPanel.removeAll();
        dataPanel.add(loadingLabel);
        dataPanel.revalidate();
    }

    public void showNotFound() {
        dataPanel.removeAll();
        dataPanel.add(new JLabel("Sportsmans not found"));
        dataPanel.revalidate();
    }

    public JTable generateTable(JsonArray arr, String[] columnNames) {

        dataPanel.removeAll();
        DataTableModel dataTableModel = null;
        try {
            dataTableModel = new DataTableModel(arr, columnNames);
        } catch (Exception e) {
            e.printStackTrace();
        }
        this.dataTableModel = dataTableModel;
        JTable table = new JTable(dataTableModel);
        /*TableColumn tableColumn = new TableColumn();
        table.addColumn();*/
        table.addMouseListener(dataTableMouseListener);
        table.setVisible(true);
        dataTable = table;
        dataPanel.add(dataTable);
        dataPanel.revalidate();
        pack();
        return table;
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        rootPanel = new JPanel();
        rootPanel.setLayout(new FormLayout("fill:4dlu:noGrow,left:39dlu:noGrow,fill:100dlu:grow,fill:50dlu:noGrow,left:5dlu:noGrow", "center:4dlu:noGrow,top:36dlu:noGrow,center:36dlu:noGrow,top:2dlu:noGrow,center:d:grow,top:4dlu:noGrow,center:4dlu:noGrow"));
        rootPanel.setBackground(new Color(-1));
        rootPanel.setForeground(new Color(-1));
        searchButton = new JButton();
        searchButton.setBackground(new Color(-1));
        searchButton.setBorderPainted(false);
        searchButton.setContentAreaFilled(false);
        searchButton.setDefaultCapable(true);
        searchButton.setEnabled(true);
        searchButton.setFocusPainted(false);
        searchButton.setFocusable(true);
        searchButton.setForeground(new Color(-1));
        searchButton.setIcon(new ImageIcon(getClass().getResource("/buttons/button_search.png")));
        searchButton.setInheritsPopupMenu(false);
        searchButton.setOpaque(false);
        searchButton.setPressedIcon(new ImageIcon(getClass().getResource("/buttons/button_search_pressed.png")));
        searchButton.setRequestFocusEnabled(true);
        searchButton.setRolloverEnabled(true);
        searchButton.setRolloverIcon(new ImageIcon(getClass().getResource("/buttons/button_search_selected.png")));
        searchButton.setSelected(false);
        searchButton.setSelectedIcon(new ImageIcon(getClass().getResource("/buttons/button_search_selected.png")));
        searchButton.setText("");
        searchButton.setVisible(true);
        CellConstraints cc = new CellConstraints();
        rootPanel.add(searchButton, cc.xy(4, 3, CellConstraints.CENTER, CellConstraints.DEFAULT));
        dataPanel = new JPanel();
        dataPanel.setLayout(new BorderLayout(0, 0));
        dataPanel.setBackground(new Color(-1));
        dataPanel.setForeground(new Color(-1));
        rootPanel.add(dataPanel, cc.xyw(2, 5, 3));
        loadingLabel = new JLabel();
        loadingLabel.setAlignmentX(0.5f);
        loadingLabel.setBackground(new Color(-1));
        loadingLabel.setForeground(new Color(-1));
        loadingLabel.setHorizontalAlignment(0);
        loadingLabel.setIcon(new ImageIcon(getClass().getResource("/loadgif.gif")));
        loadingLabel.setText("");
        loadingLabel.setVisible(true);
        dataPanel.add(loadingLabel, BorderLayout.NORTH);
        mainSearchField = new JTextField();
        mainSearchField.setBackground(new Color(-1114625));
        rootPanel.add(mainSearchField, new CellConstraints(2, 3, 2, 1, CellConstraints.FILL, CellConstraints.FILL, new Insets(5, 0, 5, 0)));
        backButton = new JButton();
        backButton.setBackground(new Color(-1));
        backButton.setBorderPainted(false);
        backButton.setContentAreaFilled(false);
        backButton.setDefaultCapable(true);
        backButton.setEnabled(true);
        backButton.setFocusPainted(false);
        backButton.setFocusable(true);
        backButton.setForeground(new Color(-1));
        backButton.setIcon(new ImageIcon(getClass().getResource("/buttons/button_back.png")));
        backButton.setInheritsPopupMenu(false);
        backButton.setOpaque(false);
        backButton.setPressedIcon(new ImageIcon(getClass().getResource("/buttons/button_back_pressed.png")));
        backButton.setRequestFocusEnabled(true);
        backButton.setRolloverEnabled(true);
        backButton.setRolloverIcon(new ImageIcon(getClass().getResource("/buttons/button_back_selected.png")));
        backButton.setSelected(false);
        backButton.setSelectedIcon(new ImageIcon(getClass().getResource("/buttons/button_back_selected.png")));
        backButton.setText("");
        backButton.setVisible(true);
        rootPanel.add(backButton, cc.xy(2, 2, CellConstraints.CENTER, CellConstraints.CENTER));
        titleLabel = new JLabel();
        Font titleLabelFont = this.$$$getFont$$$("Segoe UI Black", -1, 16, titleLabel.getFont());
        if (titleLabelFont != null) titleLabel.setFont(titleLabelFont);
        titleLabel.setForeground(new Color(-16777216));
        titleLabel.setHorizontalAlignment(0);
        titleLabel.setText("Label");
        rootPanel.add(titleLabel, cc.xyw(3, 2, 2, CellConstraints.DEFAULT, CellConstraints.FILL));
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        Font font = new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
        boolean isMac = System.getProperty("os.name", "").toLowerCase(Locale.ENGLISH).startsWith("mac");
        Font fontWithFallback = isMac ? new Font(font.getFamily(), font.getStyle(), font.getSize()) : new StyleContext().getFont(font.getFamily(), font.getStyle(), font.getSize());
        return fontWithFallback instanceof FontUIResource ? fontWithFallback : new FontUIResource(fontWithFallback);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return rootPanel;
    }

}
