package forms;

import com.jgoodies.forms.layout.CellConstraints;
import com.jgoodies.forms.layout.FormLayout;

import javax.swing.*;
import javax.swing.plaf.FontUIResource;
import javax.swing.text.StyleContext;
import java.awt.*;
import java.util.Locale;

import static java.lang.Math.abs;
import static java.lang.Math.round;

public class StartForm {
    private JPanel rootPanel;
    private JButton sportsmansButton;
    private JButton competitionsButton;
    private JButton trainersButton;
    private JButton buildingsButton;

    public StartForm() {
    }


    public JButton getSportsmansButton() {
        return sportsmansButton;
    }

    public JButton getCompetitionsButton() {
        return competitionsButton;
    }

    public JButton getTrainersButton() {
        return trainersButton;
    }

    public JButton getBuildingsButton() {
        return buildingsButton;
    }

    public JPanel getRootPanel() {
        return rootPanel;
    }
    /*    private void changeSizeSmoothly(int width, int height, int speed) {
        Thread t = new Thread() {
            Runnable runn = new Runnable() {
                public void run() {
                    revalidate();
                }
            };

            public void run() {
                int oldWidth = getWidth();
                int oldHeight = getHeight();
                if (oldHeight == height && oldWidth == width) {
                    return;
                }
                int widthr = width - oldWidth;
                int heightr = height - oldHeight;
                int widths = Integer.signum(widthr);
                int heights = Integer.signum(heightr);
                if (abs(widthr) < abs(heightr)) {
                    int r = abs(heightr);
                    double curWidth = oldWidth;
                    int curHeight = oldHeight;
                    double k = (double) abs(widthr) / abs(heightr);
                    for (int i = 0; i < r; i++) {
                        curWidth += widths * k;
                        curHeight += heights;
                        setSize((int) round(curWidth), curHeight);
                        try {
                            SwingUtilities.invokeAndWait(runn);
                        } catch (Exception e) {
                            System.out.println("хаха");
                        }
                    }
                } else {
                    int r = abs(widthr);
                    int curWidth = oldWidth;
                    double curHeight = oldHeight;
                    double k = (double) abs(heightr) / abs(widthr);
                    for (int i = 0; i < r; i++) {
                        curWidth += widths;
                        curHeight += heights * k;
                        setSize(curWidth, (int) round(curHeight));
                        try {
                            SwingUtilities.invokeAndWait(runn);
                        } catch (Exception e) {
                        }
                    }
                }

                return;
            }

        };
        t.start();


    }*/


    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        rootPanel = new JPanel();
        rootPanel.setLayout(new FormLayout("fill:10dlu:grow,left:4dlu:noGrow,fill:max(d;4px):noGrow,left:4dlu:noGrow,fill:10dlu:grow", "center:10dlu:noGrow,top:4dlu:noGrow,center:20dlu:noGrow,top:5dlu:noGrow,center:10dlu:noGrow,top:4dlu:noGrow,center:40dlu:noGrow,top:5dlu:noGrow,center:10dlu:noGrow,top:4dlu:noGrow,center:40dlu:noGrow,top:4dlu:noGrow,center:10dlu:noGrow,top:4dlu:noGrow,center:40dlu:noGrow,top:5dlu:noGrow,center:10dlu:noGrow,top:4dlu:noGrow,center:40dlu:noGrow,top:4dlu:noGrow,center:10dlu:noGrow"));
        rootPanel.setBackground(new Color(-1));
        sportsmansButton = new JButton();
        sportsmansButton.setBackground(new Color(-1));
        sportsmansButton.setBorderPainted(false);
        sportsmansButton.setContentAreaFilled(false);
        sportsmansButton.setDefaultCapable(true);
        sportsmansButton.setEnabled(true);
        sportsmansButton.setFocusPainted(false);
        sportsmansButton.setFocusable(true);
        sportsmansButton.setForeground(new Color(-1));
        sportsmansButton.setIcon(new ImageIcon(getClass().getResource("/buttons/startScreen/button_sportsmeny.png")));
        sportsmansButton.setInheritsPopupMenu(false);
        sportsmansButton.setOpaque(false);
        sportsmansButton.setPressedIcon(new ImageIcon(getClass().getResource("/buttons/startScreen/button_sportsmeny_pressed.png")));
        sportsmansButton.setRequestFocusEnabled(true);
        sportsmansButton.setRolloverEnabled(true);
        sportsmansButton.setRolloverIcon(new ImageIcon(getClass().getResource("/buttons/startScreen/button_sportsmeny_selected.png")));
        sportsmansButton.setSelected(false);
        sportsmansButton.setSelectedIcon(new ImageIcon(getClass().getResource("/buttons/startScreen/button_sportsmeny_selected.png")));
        sportsmansButton.setText("");
        sportsmansButton.setVisible(true);
        CellConstraints cc = new CellConstraints();
        rootPanel.add(sportsmansButton, cc.xy(3, 7));
        final JLabel label1 = new JLabel();
        Font label1Font = this.$$$getFont$$$("Segoe UI Black", -1, 16, label1.getFont());
        if (label1Font != null) label1.setFont(label1Font);
        label1.setText("Что вы хотите посмотреть?");
        rootPanel.add(label1, cc.xy(3, 3));
        competitionsButton = new JButton();
        competitionsButton.setBackground(new Color(-1));
        competitionsButton.setBorderPainted(false);
        competitionsButton.setContentAreaFilled(false);
        competitionsButton.setDefaultCapable(true);
        competitionsButton.setEnabled(true);
        competitionsButton.setFocusPainted(false);
        competitionsButton.setFocusable(true);
        competitionsButton.setForeground(new Color(-1));
        competitionsButton.setIcon(new ImageIcon(getClass().getResource("/buttons/startScreen/button_sorevnovaniya.png")));
        competitionsButton.setInheritsPopupMenu(false);
        competitionsButton.setOpaque(false);
        competitionsButton.setPressedIcon(new ImageIcon(getClass().getResource("/buttons/startScreen/button_sorevnovaniya_pressed.png")));
        competitionsButton.setRequestFocusEnabled(true);
        competitionsButton.setRolloverEnabled(true);
        competitionsButton.setRolloverIcon(new ImageIcon(getClass().getResource("/buttons/startScreen/button_sorevnovaniya_selected.png")));
        competitionsButton.setSelected(false);
        competitionsButton.setSelectedIcon(new ImageIcon(getClass().getResource("/buttons/startScreen/button_sportsmeny_selected.png")));
        competitionsButton.setText("");
        competitionsButton.setVisible(true);
        rootPanel.add(competitionsButton, cc.xy(3, 11));
        trainersButton = new JButton();
        trainersButton.setBackground(new Color(-1));
        trainersButton.setBorderPainted(false);
        trainersButton.setContentAreaFilled(false);
        trainersButton.setDefaultCapable(true);
        trainersButton.setEnabled(true);
        trainersButton.setFocusPainted(false);
        trainersButton.setFocusable(true);
        trainersButton.setForeground(new Color(-1));
        trainersButton.setIcon(new ImageIcon(getClass().getResource("/buttons/startScreen/button_trenery.png")));
        trainersButton.setInheritsPopupMenu(false);
        trainersButton.setOpaque(false);
        trainersButton.setPressedIcon(new ImageIcon(getClass().getResource("/buttons/startScreen/button_trenery_pressed.png")));
        trainersButton.setRequestFocusEnabled(true);
        trainersButton.setRolloverEnabled(true);
        trainersButton.setRolloverIcon(new ImageIcon(getClass().getResource("/buttons/startScreen/button_trenery_selected.png")));
        trainersButton.setSelected(false);
        trainersButton.setText("");
        trainersButton.setVisible(true);
        rootPanel.add(trainersButton, cc.xy(3, 15));
        buildingsButton = new JButton();
        buildingsButton.setBackground(new Color(-1));
        buildingsButton.setBorderPainted(false);
        buildingsButton.setContentAreaFilled(false);
        buildingsButton.setDefaultCapable(true);
        buildingsButton.setEnabled(true);
        buildingsButton.setFocusPainted(false);
        buildingsButton.setFocusable(true);
        buildingsButton.setForeground(new Color(-1));
        buildingsButton.setIcon(new ImageIcon(getClass().getResource("/buttons/startScreen/button_sooruzheniya.png")));
        buildingsButton.setInheritsPopupMenu(false);
        buildingsButton.setOpaque(false);
        buildingsButton.setPressedIcon(new ImageIcon(getClass().getResource("/buttons/startScreen/button_sooruzheniya_pressed.png")));
        buildingsButton.setRequestFocusEnabled(true);
        buildingsButton.setRolloverEnabled(true);
        buildingsButton.setRolloverIcon(new ImageIcon(getClass().getResource("/buttons/startScreen/button_sooruzheniya_selected.png")));
        buildingsButton.setSelected(false);
        buildingsButton.setText("");
        buildingsButton.setVisible(true);
        rootPanel.add(buildingsButton, cc.xy(3, 19));
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        Font font = new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
        boolean isMac = System.getProperty("os.name", "").toLowerCase(Locale.ENGLISH).startsWith("mac");
        Font fontWithFallback = isMac ? new Font(font.getFamily(), font.getStyle(), font.getSize()) : new StyleContext().getFont(font.getFamily(), font.getStyle(), font.getSize());
        return fontWithFallback instanceof FontUIResource ? fontWithFallback : new FontUIResource(fontWithFallback);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return rootPanel;
    }

}
